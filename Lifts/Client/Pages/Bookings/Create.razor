@page "/Bookings/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
<h3>Create Create New Bookings</h3>
<hr />
<br />
<EditForm Model="@booking" OnValidSubmit="CreateBooking">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Booking Date: </label>
        <div>
            <InputDate @bind-Value="@booking.BookingDate" class="form-control" />
            <ValidationMessage For="@(() => booking.BookingDate)" />
        </div>
    </div>

    <div class="form-group">
        <label>Start Date: </label>
        <div>
            <InputDate @bind-Value="@booking.StartDate" class="form-control" />
            <ValidationMessage For="@(() => booking.StartDate)" />
        </div>
    </div>

    <div class="form-group">
        <label>Start Time: </label>
        <div>
            <InputText @bind-Value="@booking.StartTime" class="form-control" />
            <ValidationMessage For="@(() => booking.BookingDate)" />
        </div>
    </div>

    <div class="form-group">
        <label>End Time: </label>
        <div>
            <InputText @bind-Value="@booking.EndTime" class="form-control" />
            <ValidationMessage For="@(() => booking.EndTime)" />
        </div>
    </div>

    <div class="form-group">
        <label>Customer: </label>
        <div>
            <InputSelect @bind-Value="@booking.CustomerId" class="form-control">
                <option value="">-- Select --</option>
                @if (Customers != null)
                {
                    foreach (var customer in Customers)
                    {
                        <option value="@customer.Id">@customer.CustomerName - @customer.CustomerLicense - @customer.CustomerContactNumber</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => booking.CustomerId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Staff: </label>
        <div>
            <InputSelect @bind-Value="@booking.StaffId" class="form-control">
                <option value="">-- Select --</option>
                @if (Staffs != null)
                {
                    foreach (var staff in Staffs)
                    {
                        <option value="@staff.Id">@staff.StaffName - @staff.StaffContactNumber</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => booking.StaffId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Vehicle: </label>
        <div>
            <InputSelect @bind-Value="@booking.VehicleID" class="form-control">
                <option value="">-- Select --</option>
                @if (Vehicles != null)
                {
                    foreach (var vehicle in Vehicles)
                    {
                        <option value="@vehicle.Id">@vehicle.Plate - @vehicle.Type.TypeName - @vehicle.Seater.SeaterNumber - @vehicle.Brand.BrandName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => @booking.VehicleID)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create Booking
    </button>
</EditForm>

@code {
    Booking booking = new Booking();
    private List<Customer> Customers;
    private List<Staff> Staffs;
    private List<Vehicle> Vehicles;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        Vehicles = await _client.GetFromJsonAsync<List<Vehicle>>($"{Endpoints.VehiclesEndpoint}");
    }

    private async Task CreateBooking()
    {
        await _client.PostAsJsonAsync(Endpoints.BookingsEndpoint, booking);
        _navManager.NavigateTo("/Booking/");
    }
}