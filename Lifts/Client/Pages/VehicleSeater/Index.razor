@page "/VehicleSeater/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3>Car Vehicle Seaters</h3>
<a href="/VehicleSeaters/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New VehicleSeater
</a>
<br />
<br />

@if (Seaters == null)
{
    <div class="alert alert-info">Loading Seaters...</div>}
else
{
    <div class="bg-dark">
        <div class="text-white">
            <table class="table table-responsive" id="bookingsTable">

                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var vehicleSeater in Seaters)
                    {
                        <tr>
                            <td>@vehicleSeater.SeaterNumber</td>
                            <td>
                                <a href="/Seaters/view/@vehicleSeater.Id" class="btn btn-primary">
                                    <span class="oi oi-book"></span>
                                </a>
                                <a href="/Seaters/edit/@vehicleSeater.Id" class="btn btn-warning">
                                    <span class="oi oi-pencil"></span>
                                </a>
                                <button class="btn btn-danger" @onclick="@(()=>Delete(vehicleSeater.Id))">
                                    <span class="oi oi-delete"></span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

}

@code { private List<VehicleSeater> Seaters;

    protected async override Task OnInitializedAsync()
    {
        Seaters = await _client.GetFromJsonAsync<List<VehicleSeater>>($"{Endpoints.VehicleSeatersEndpoint}");
    }

    async Task Delete(int vehicleSeaterId)
    {
        var vehicleSeater = Seaters.First(q => q.Id == vehicleSeaterId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {vehicleSeater.SeaterNumber}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.VehicleSeatersEndpoint}/{vehicleSeaterId}");
            await OnInitializedAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }
}
