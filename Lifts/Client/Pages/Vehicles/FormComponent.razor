@inject HttpClient _client

<EditForm Model="@vehicle" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Plate: </label>
            <div>
                <InputText @bind-Value="@vehicle.Plate" class="form-control" />
                <ValidationMessage For="@(() => vehicle.Plate)" />
            </div>
        </div>

        <div class="form-group">
            <label>Type: </label>
            <div>
                <InputSelect @bind-Value="@vehicle.TypeID" class="form-control">
                    <option value="">-- Select --</option>
                    @if (Types != null)
                    {
                        foreach (var type in Types)
                        {
                            <option value="@type.Id">@type.TypeName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => vehicle.TypeID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Seater: </label>
            <div>
                <InputSelect @bind-Value="@vehicle.SeaterID" class="form-control">
                    <option value="">-- Select --</option>
                    @if (Seaters != null)
                    {
                        foreach (var seater in Seaters)
                        {
                            <option value="@seater.Id">@seater.SeaterNumber</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => vehicle.SeaterID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Brand: </label>
            <div>
                <InputSelect @bind-Value="@vehicle.BrandID" class="form-control">
                    <option value="">-- Select --</option>
                    @if (Brands != null)
                    {
                        foreach (var brand in Brands)
                        {
                            <option value="@brand.Id">@brand.BrandName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => vehicle.BrandID)" />
            </div>
        </div>
    </fieldset>
        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success btn-block">
                @ButtonText
            </button>}
        <Lifts.Client.Components.BackToList Target="Vehicle" />
</EditForm>
@code { [Parameter] public Vehicle vehicle { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;

    private IList<VehicleBrand> Brands;
    private IList<VehicleSeater> Seaters;
    private IList<VehicleType> Types;

    protected async override Task OnInitializedAsync()
    {
        Brands = await _client.GetFromJsonAsync<List<VehicleBrand>>($"{Endpoints.VehicleBrandsEndpoint}");
        Seaters = await _client.GetFromJsonAsync<List<VehicleSeater>>($"{Endpoints.VehicleSeatersEndpoint}");
        Types = await _client.GetFromJsonAsync<List<VehicleType>>($"{Endpoints.VehicleTypesEndpoint}");
    } }
